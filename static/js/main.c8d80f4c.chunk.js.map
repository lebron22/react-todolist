{"version":3,"sources":["components/Heading.js","reducers/tasksReducer.js","actions/types.js","actions/index.js","constants/startTasks.js","contexts/tasksContext.js","components/AppMain.js","utils/colors.js","components/Button/Button.js","components/Header.js","components/SingleTask.js","components/TaskList.js","components/SwitchPanel.js","components/ElsePanel.js","App.js","index.js"],"names":["Heading","react_default","a","createElement","StyledH1","styled","h1","_templateObject","tasksReducer","state","action","type","map","task","id","payload","Object","objectSpread","completed","restTasks","hiddenInSearch","concat","toConsumableArray","content","hiddenByFilterButtons","uuid","filter","toUpperCase","text","inputValue","includes","activeButton","filteredTasks","searchTasks","filterTasksByCompletion","startTasks","hiddenBySearch","TaskContext","createContext","TasksContextProvider","props","_useState","useState","_useState2","slicedToArray","activeFilter","setActiveFilter","_useReducer","useReducer","localData","localStorage","getItem","JSON","parse","_useReducer2","tasks","dispatch","useEffect","setItem","stringify","Provider","value","children","StyledAppMain","main","AppMain_templateObject","AppMain","_ref","colors","lightGray","darkGray","lightBlack","darkWhite","mainGreen","mainYellow","mainRed","Button","button","Button_templateObject","ButtonPrimary","_templateObject2","round","primary","ButtonTask","_templateObject3","ButtonTaskCompleted","_templateObject4","ButtonTaskEdit","_templateObject5","isFocused","ButtonTaskRemove","_templateObject6","Header","setActiveButton","_useState3","_useState4","setInputValue","_useContext","useContext","HeaderForm","onSubmit","e","preventDefault","alert","handleFormSubmit","onClick","className","placeholder","onChange","target","handleInputChange","form","Header_templateObject","SingleTask","editInputValue","handleFocus","renderTaskContent","autoFocus","SingleTaskLi","li","SingleTask_templateObject","TaskList","tasksToShow","components_SingleTask","key","renderTasks","length","TaskContainer","div","TaskList_templateObject","StyledSwitchesContainer","SwitchPanel_templateObject","SwitchPanel","renderButtons","title","index","StyledElsePanel","ElsePanel_templateObject","ElsePanel","renderCompletedTasksLength","GlobalStyle","createGlobalStyle","App_templateObject","App","Fragment","components_Heading","tasksContext","components_AppMain","components_Header","components_TaskList","components_SwitchPanel","components_ElsePanel","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.c8d80f4c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nimport React from \"react\";\r\n\r\nconst Heading = () => {\r\n  return <StyledH1>Lista zada≈Ñ do wykonania</StyledH1>;\r\n};\r\n\r\nexport default Heading;\r\n\r\nconst StyledH1 = styled.h1`\r\n  font-size: 1.2rem;\r\n  margin: 20px 0;\r\n  text-align: center;\r\n`;\r\n","import uuid from \"uuid/v1\";\r\n\r\nimport {\r\n  HANDLE_TASK_COMPLETE,\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  SEARCH_TASKS,\r\n  FILTER_TASKS_BY_COMPLETION,\r\n  REMOVE_COMPLETED_TASK\r\n} from \"../actions/types\";\r\n\r\nexport const tasksReducer = (state, action) => {\r\n  switch (action.type) {\r\n    case HANDLE_TASK_COMPLETE:\r\n      return state.map(task =>\r\n        task.id === action.payload.id\r\n          ? { ...task, completed: !task.completed }\r\n          : task\r\n      );\r\n\r\n    case ADD_TASK:\r\n      const restTasks = state.map(task => ({ ...task, hiddenInSearch: false }));\r\n      return [\r\n        ...restTasks,\r\n        {\r\n          content: action.payload.content,\r\n          completed: false,\r\n          hiddenByFilterButtons: false,\r\n          id: uuid()\r\n        }\r\n      ];\r\n\r\n    case REMOVE_TASK:\r\n      return state.filter(task => task.id !== action.payload.id);\r\n\r\n    case SEARCH_TASKS:\r\n      return state.map(task => {\r\n        const content = task.content.toUpperCase();\r\n        const text = action.payload.inputValue.toUpperCase();\r\n\r\n        return content.includes(text)\r\n          ? { ...task, hiddenInSearch: false }\r\n          : { ...task, hiddenInSearch: true };\r\n      });\r\n\r\n    case FILTER_TASKS_BY_COMPLETION:\r\n      const filteredTasks = activeButton => {\r\n        switch (activeButton) {\r\n          case \"all\":\r\n            return state.map(task => ({\r\n              ...task,\r\n              hiddenByFilterButtons: false\r\n            }));\r\n          case \"active\":\r\n            return state.map(task =>\r\n              !task.completed\r\n                ? { ...task, hiddenByFilterButtons: false }\r\n                : { ...task, hiddenByFilterButtons: true }\r\n            );\r\n          case \"completed\":\r\n            return state.map(task =>\r\n              task.completed\r\n                ? { ...task, hiddenByFilterButtons: false }\r\n                : { ...task, hiddenByFilterButtons: true }\r\n            );\r\n          default:\r\n            return state;\r\n        }\r\n      };\r\n      return filteredTasks(action.payload.activeButton);\r\n\r\n    case REMOVE_COMPLETED_TASK:\r\n      return state.filter(task => !task.completed);\r\n\r\n    default:\r\n      break;\r\n  }\r\n};\r\n","export const HANDLE_TASK_COMPLETE = \"HANDLE_TASK_COMPLETE\";\r\nexport const ADD_TASK = \"ADD_TASK\";\r\nexport const REMOVE_TASK = \"REMOVE_TASK\";\r\nexport const SEARCH_TASKS = \"SEARCH_TASKS\";\r\nexport const FILTER_TASKS_BY_COMPLETION = \"FILTER_TASKS_BY_COMPLETION\";\r\nexport const REMOVE_COMPLETED_TASK = \"REMOVE_COMPLETED_TASK\";\r\n","import {\r\n  HANDLE_TASK_COMPLETE,\r\n  ADD_TASK,\r\n  REMOVE_TASK,\r\n  SEARCH_TASKS,\r\n  FILTER_TASKS_BY_COMPLETION,\r\n  REMOVE_COMPLETED_TASK\r\n} from \"./types\";\r\n\r\nexport const handleTaskComplete = id => {\r\n  return {\r\n    type: HANDLE_TASK_COMPLETE,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const addTask = content => {\r\n  return {\r\n    type: ADD_TASK,\r\n    payload: { content }\r\n  };\r\n};\r\n\r\nexport const removeTask = id => {\r\n  return {\r\n    type: REMOVE_TASK,\r\n    payload: { id }\r\n  };\r\n};\r\n\r\nexport const searchTasks = inputValue => {\r\n  return {\r\n    type: SEARCH_TASKS,\r\n    payload: { inputValue }\r\n  };\r\n};\r\n\r\nexport const filterTasksByCompletion = activeButton => {\r\n  return {\r\n    type: FILTER_TASKS_BY_COMPLETION,\r\n    payload: { activeButton }\r\n  };\r\n};\r\n\r\nexport const removeCompletedTask = () => {\r\n  return {\r\n    type: REMOVE_COMPLETED_TASK\r\n  };\r\n};\r\n","export const startTasks = [\r\n  {\r\n    content: \"Twoje pierwsze zadanie.\",\r\n    completed: false,\r\n    hiddenByFilterButtons: false,\r\n    hiddenBySearch: false,\r\n    id: 1\r\n  },\r\n  {\r\n    content: \"Hello World!\",\r\n    completed: false,\r\n    hiddenByFilterButtons: false,\r\n    hiddenBySearch: false,\r\n    id: 2\r\n  }\r\n];\r\n","import React, { useState, useReducer, useEffect, createContext } from \"react\";\r\nimport { tasksReducer } from \"../reducers/tasksReducer\";\r\nimport { filterTasksByCompletion } from \"../actions\";\r\nimport { startTasks } from \"../constants/startTasks\";\r\n\r\nexport const TaskContext = createContext();\r\n\r\nconst TasksContextProvider = props => {\r\n  const [activeFilter, setActiveFilter] = useState(\"all\");\r\n\r\n  const [tasks, dispatch] = useReducer(tasksReducer, [], () => {\r\n    const localData = localStorage.getItem(\"tasks\");\r\n    return localData ? JSON.parse(localData) : startTasks;\r\n  });\r\n\r\n  useEffect(() => {\r\n    dispatch(filterTasksByCompletion(activeFilter));\r\n  }, []);\r\n\r\n  useEffect(() => localStorage.setItem(\"tasks\", JSON.stringify(tasks)), [\r\n    tasks\r\n  ]);\r\n\r\n  return (\r\n    <TaskContext.Provider\r\n      value={{ tasks, activeFilter, setActiveFilter, dispatch }}\r\n    >\r\n      {props.children}\r\n    </TaskContext.Provider>\r\n  );\r\n};\r\n\r\nexport default TasksContextProvider;\r\n","import React from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nconst AppMain = ({ children }) => {\r\n  return <StyledAppMain>{children}</StyledAppMain>;\r\n};\r\n\r\nconst StyledAppMain = styled.main`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  max-width: 500px;\r\n  margin: 0 auto;\r\n  box-shadow: 0 0 50px rgba(0, 0, 0, 0.2);\r\n  width: 95%;\r\n`;\r\n\r\nexport default AppMain;\r\n","export const colors = {\r\n  lightGray: \"#eee\",\r\n  gray: \"#ededed\",\r\n  darkGray: \"#ddd\",\r\n  lightBlack: \"#1a1919\",\r\n  black: \"#000\",\r\n  white: \"#fff\",\r\n  darkWhite: \"#fefefe\",\r\n  mainGreen: \"#9de9ad\",\r\n  mainYellow: \"#fff59b\",\r\n  mainRed: \"#fd7381\"\r\n};\r\n","import styled from \"styled-components\";\r\nimport { colors } from \"../../utils/colors\";\r\nconst {\r\n  lightGray,\r\n  darkGray,\r\n  lightBlack,\r\n  darkWhite,\r\n  mainGreen,\r\n  mainYellow,\r\n  mainRed\r\n} = colors;\r\n\r\nexport const Button = styled.button`\r\n  cursor: pointer;\r\n  outline: none;\r\n`;\r\n\r\nexport const ButtonPrimary = styled(Button)`\r\n  min-width: ${props => (props.round ? \"40px\" : \"30%\")};\r\n  height: 40px;\r\n  background-color: ${props => (props.primary ? lightBlack : lightGray)};\r\n  border: ${props =>\r\n    props.primary ? `1px solid ${lightBlack}` : `2px solid ${darkGray}`};\r\n  color: ${props => (props.primary ? lightGray : lightBlack)};\r\n  border-radius: ${props => (props.round ? \"50%\" : \"5px\")};\r\n  text-transform: capitalize;\r\n  padding: 0 5px;\r\n  transition: 0.2s ease-in-out;\r\n  :hover {\r\n    border: 1px solid ${lightBlack};\r\n  }\r\n\r\n  i {\r\n    font-size: 20px;\r\n  }\r\n`;\r\n\r\nexport const ButtonTask = styled(Button)`\r\n  width: 30px;\r\n  height: 30px;\r\n  border: 1px solid ${lightGray};\r\n  border-radius: 50%;\r\n  background-color: ${darkWhite};\r\n`;\r\nexport const ButtonTaskCompleted = styled(ButtonTask)`\r\n  background-color: ${props =>\r\n    props.completed ? `${mainGreen}` : `${darkWhite}`};\r\n  :hover {\r\n    background-color: ${mainGreen};\r\n  }\r\n`;\r\nexport const ButtonTaskEdit = styled(ButtonTask)`\r\n  background-color: ${props =>\r\n    props.isFocused ? `${mainYellow}` : `${darkWhite}`};\r\n  :hover {\r\n    background-color: ${mainYellow};\r\n  }\r\n`;\r\n\r\nexport const ButtonTaskRemove = styled(ButtonTask)`\r\n  :hover {\r\n    background-color: ${mainRed};\r\n  }\r\n`;\r\n","import React, { useContext, useState, useEffect } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { colors } from \"../utils/colors\";\r\n\r\nimport { TaskContext } from \"../contexts/tasksContext\";\r\nimport { addTask, searchTasks, filterTasksByCompletion } from \"../actions\";\r\n\r\nimport { ButtonPrimary } from \"../components/Button/Button\";\r\nconst { lightGray } = colors;\r\n\r\nconst Header = () => {\r\n  const [activeButton, setActiveButton] = useState(\"search\");\r\n  const [inputValue, setInputValue] = useState(\"\");\r\n\r\n  const { dispatch, setActiveFilter } = useContext(TaskContext);\r\n\r\n  useEffect(() => {\r\n    if (activeButton === \"search\") {\r\n      dispatch(searchTasks(inputValue));\r\n    } else return;\r\n  }, [inputValue]);\r\n\r\n  const handleFormSubmit = e => {\r\n    e.preventDefault();\r\n    if (activeButton === \"add\") {\r\n      if (inputValue === \"\") {\r\n        alert(\"Podaj nazwƒô zadania\");\r\n      } else {\r\n        dispatch(addTask(inputValue));\r\n        dispatch(filterTasksByCompletion(\"all\"));\r\n        setActiveFilter(\"all\");\r\n        setInputValue(\"\");\r\n      }\r\n    } else if (activeButton === \"search\") {\r\n      dispatch(searchTasks(inputValue));\r\n    } else return;\r\n  };\r\n\r\n  const handleInputChange = e => {\r\n    setInputValue(e.target.value);\r\n    activeButton === \"search\" && dispatch(searchTasks(inputValue));\r\n  };\r\n\r\n  return (\r\n    <HeaderForm onSubmit={e => handleFormSubmit(e)}>\r\n      <ButtonPrimary\r\n        primary={activeButton === \"add\"}\r\n        round\r\n        onClick={() => setActiveButton(\"add\")}\r\n      >\r\n        <i className=\"fas fa-plus\" />\r\n      </ButtonPrimary>\r\n      <input\r\n        type=\"text\"\r\n        placeholder=\"Nazwa zadania...\"\r\n        value={inputValue}\r\n        onChange={e => handleInputChange(e)}\r\n      />\r\n      <ButtonPrimary\r\n        primary={activeButton === \"search\"}\r\n        round\r\n        onClick={() => {\r\n          setActiveButton(\"search\");\r\n          setInputValue(\"\");\r\n        }}\r\n      >\r\n        <i className=\"fas fa-search\" />\r\n      </ButtonPrimary>\r\n    </HeaderForm>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n\r\nconst HeaderForm = styled.form`\r\n  width: 90%;\r\n  display: flex;\r\n  justify-content: space-around;\r\n  margin: 10px 0;\r\n\r\n  input {\r\n    width: 60%;\r\n    background-color: ${lightGray};\r\n    border: none;\r\n    padding: 10px;\r\n    font-size: 18px;\r\n    word-wrap: break-word;\r\n  }\r\n`;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { TaskContext } from \"../contexts/tasksContext\";\r\nimport { removeTask, handleTaskComplete } from \"../actions\";\r\nimport styled from \"styled-components\";\r\nimport {\r\n  ButtonTaskCompleted,\r\n  ButtonTaskEdit,\r\n  ButtonTaskRemove\r\n} from \"./Button/Button\";\r\n\r\nconst SingleTask = ({ task }) => {\r\n  const { dispatch } = useContext(TaskContext);\r\n\r\n  const [inputValue, editInputValue] = useState(task.content);\r\n  const [isFocused, handleFocus] = useState(false);\r\n\r\n  const renderTaskContent = isFocused ? (\r\n    <input\r\n      autoFocus\r\n      value={inputValue}\r\n      onChange={e => editInputValue(e.target.value)}\r\n    />\r\n  ) : (\r\n    <p>{inputValue}</p>\r\n  );\r\n\r\n  return (\r\n    <SingleTaskLi completed={task.completed}>\r\n      <ButtonTaskCompleted\r\n        completed={task.completed}\r\n        onClick={() => dispatch(handleTaskComplete(task.id))}\r\n      >\r\n        <i className=\"fas fa-check\" />\r\n      </ButtonTaskCompleted>\r\n      {renderTaskContent}\r\n      <ButtonTaskEdit\r\n        isFocused={isFocused}\r\n        onClick={() => inputValue !== \"\" && handleFocus(!isFocused)}\r\n      >\r\n        <i className=\"fas fa-edit\" />\r\n      </ButtonTaskEdit>\r\n      <ButtonTaskRemove onClick={() => dispatch(removeTask(task.id))}>\r\n        <i className=\"far fa-trash-alt\" />\r\n      </ButtonTaskRemove>\r\n    </SingleTaskLi>\r\n  );\r\n};\r\n\r\nexport default SingleTask;\r\n\r\nconst SingleTaskLi = styled.li`\r\n  display: flex;\r\n  justify-content: space-around;\r\n  max-width: 95vw;\r\n  padding: 5px;\r\n  border-bottom: 1px solid #ddd;\r\n  background-color: ${props =>\r\n    props.completed ? \"rgba(237, 237, 237, 0.3)\" : \"#fefefe\"};\r\n\r\n  input {\r\n    width: 60%;\r\n    font-size: 18px;\r\n    border: none;\r\n    text-decoration: ${props => (props.completed ? \"line-through\" : \"none\")};\r\n    background-color: ${props =>\r\n      props.completed ? \"rgba(237, 237, 237, 0.3)\" : \"#fefefe\"};\r\n    color: ${props => (props.completed ? \"#ccc\" : \"#000\")};\r\n  }\r\n\r\n  p {\r\n    width: 60%;\r\n    align-self: center;\r\n    text-decoration: ${props => (props.completed ? \"line-through\" : \"none\")};\r\n    word-wrap: break-word;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskContext } from \"../contexts/tasksContext\";\r\nimport SingleTask from \"./SingleTask\";\r\nimport styled from \"styled-components\";\r\nimport { colors } from \"../utils/colors\";\r\nconst { darkWhite } = colors;\r\n\r\nconst TaskList = () => {\r\n  const { tasks } = useContext(TaskContext);\r\n\r\n  const tasksToShow = tasks\r\n    .filter(task => !task.hiddenByFilterButtons && !task.hiddenInSearch)\r\n    .map(task => <SingleTask task={task} key={task.id} />);\r\n\r\n  const renderTasks = tasks.length ? (\r\n    <ul>{tasksToShow.length ? tasksToShow : <li>No tasks to show.</li>}</ul>\r\n  ) : (\r\n    <div>No tasks to do. Hello free time.</div>\r\n  );\r\n\r\n  return <TaskContainer>{renderTasks}</TaskContainer>;\r\n};\r\n\r\nexport default TaskList;\r\n\r\nconst TaskContainer = styled.div`\r\n  background-color: ${darkWhite};\r\n  width: 100%;\r\n\r\n  ul {\r\n    list-style: none;\r\n  }\r\n\r\n  .empty {\r\n    margin: 0 10px;\r\n  }\r\n`;\r\n","import React, { useContext } from \"react\";\r\nimport { ButtonPrimary } from \"./Button/Button\";\r\nimport { TaskContext } from \"../contexts/tasksContext\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nimport { filterTasksByCompletion } from \"../actions\";\r\n\r\nconst SwitchPanel = () => {\r\n  const { dispatch, activeFilter, setActiveFilter } = useContext(TaskContext);\r\n\r\n  const buttons = [\r\n    { title: \"all\" },\r\n    { title: \"active\" },\r\n    { title: \"completed\" }\r\n  ];\r\n\r\n  const renderButtons = buttons.map(({ title }, index) => (\r\n    <ButtonPrimary\r\n      key={index}\r\n      primary={activeFilter === title}\r\n      onClick={() => {\r\n        setActiveFilter(title);\r\n        dispatch(filterTasksByCompletion(title));\r\n      }}\r\n    >\r\n      {title}\r\n    </ButtonPrimary>\r\n  ));\r\n\r\n  return <StyledSwitchesContainer>{renderButtons}</StyledSwitchesContainer>;\r\n};\r\n\r\nconst StyledSwitchesContainer = styled.div`\r\n  width: 95%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  margin: 10px;\r\n`;\r\n\r\nexport default SwitchPanel;\r\n","import React, { useContext } from \"react\";\r\nimport { TaskContext } from \"../contexts/tasksContext\";\r\nimport { ButtonPrimary } from \"./Button/Button\";\r\n\r\nimport { removeCompletedTask } from \"../actions\";\r\n\r\nimport styled from \"styled-components\";\r\n\r\nconst ElsePanel = () => {\r\n  const { tasks, dispatch } = useContext(TaskContext);\r\n\r\n  //get number of completed tasks\r\n\r\n  const filterCompletedTasks = () =>\r\n    tasks.filter(task => task.completed).length;\r\n\r\n  const renderCompletedTasksLength = filterCompletedTasks();\r\n\r\n  return (\r\n    <StyledElsePanel>\r\n      <div>{tasks.length} items left</div>\r\n      <div>\r\n        <ButtonPrimary onClick={() => dispatch(removeCompletedTask())}>\r\n          Clear completed ({renderCompletedTasksLength})\r\n        </ButtonPrimary>\r\n      </div>\r\n    </StyledElsePanel>\r\n  );\r\n};\r\n\r\nconst StyledElsePanel = styled.div`\r\n  width: 95%;\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  margin: 10px;\r\n  div {\r\n    width: 50%;\r\n    text-align: center;\r\n  }\r\n`;\r\n\r\nexport default ElsePanel;\r\n","import React from \"react\";\nimport { createGlobalStyle } from \"styled-components\";\nimport Heading from \"./components/Heading\";\nimport TasksContextProvider from \"./contexts/tasksContext\";\nimport AppMain from \"./components/AppMain\";\nimport Header from \"./components/Header\";\nimport TaskList from \"./components/TaskList\";\nimport SwitchPanel from \"./components/SwitchPanel\";\nimport ElsePanel from \"./components/ElsePanel\";\nimport { colors } from \"./utils/colors\";\nconst { lightGray } = colors;\n\nconst App = () => {\n  return (\n    <>\n      <GlobalStyle />\n      <Heading />\n      <TasksContextProvider>\n        <AppMain>\n          <Header />\n          <TaskList />\n          <SwitchPanel />\n          <ElsePanel />\n        </AppMain>\n      </TasksContextProvider>\n    </>\n  );\n};\n\nconst GlobalStyle = createGlobalStyle`\n* {\n  margin: 0;\n  padding: 0;\n}\n\nbody {\n  font-family: Roboto, Helvetica, sans-serif;\n  width: 100%;\n  background-color: ${lightGray};\n}\n`;\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}